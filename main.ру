import telebot, sqlite3, datetime, pytz, os
from apscheduler.schedulers.background import BackgroundScheduler

# –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –≤ –∫–∞–≤—ã—á–∫–∞—Ö:
TOKEN = "7813840039:AAFquVUm1z_IXM60VJwWqftocUCFYGhHRYI"

bot = telebot.TeleBot(TOKEN)
tz = pytz.timezone("Europe/Kyiv")

# —Å–æ–∑–¥–∞—ë–º/–ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É
conn = sqlite3.connect("drops.db", check_same_thread=False)
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(
    name TEXT, ap INTEGER, expire TEXT, last TEXT, updated TIMESTAMP)""")
cur.execute("""CREATE TABLE IF NOT EXISTS events(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    time TEXT, ap INTEGER)""")
conn.commit()

scheduler = BackgroundScheduler(timezone=tz)
scheduler.start()

def calc_priority(ap, expire, last, drop_ap):
    soon = any(int(x)<=3 for x in expire)
    rest = max(map(int,last))>=7
    surplus = int(ap)>=drop_ap+20
    return 2*soon + surplus + rest

@bot.message_handler(commands=['drop'])
def drop(msg):
    try:
        # –ø—Ä–∏–º–µ—Ä: /drop –ò–º—è 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7
        parts = msg.text.split()
        name = parts[1]
        ap = int(''.join([c for c in parts[2] if c.isdigit()]))
        exp_i = parts.index('–≤–µ—Ä–Ω—É—Ç')
        last_i = parts.index('–ø–æ—Å–ª–µ–¥–Ω–∏–π')
        expire = [int(x) for x in parts[exp_i+1].replace(',', ' ').split()]
        last = [int(x) for x in parts[last_i+1].replace('-', ' ').split()]
        cur.execute("REPLACE INTO users VALUES (?,?,?,?,?)",
            (name, ap, ','.join(map(str,expire)), '-'.join(map(str,last)), datetime.datetime.now(tz)))
        conn.commit()
        bot.reply_to(msg, f"‚úÖ {name} –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ ({ap}AP, –≤–µ—Ä–Ω—É—Ç {expire}, –ø–æ—Å–ª–µ–¥–Ω–∏–π {last})")
    except Exception:
        bot.reply_to(msg,"‚ùå –ü—Ä–∏–º–µ—Ä: /drop –ò–º—è 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7")

@bot.message_handler(commands=['newdrop'])
def newdrop(msg):
    try:
        # –ø—Ä–∏–º–µ—Ä: /newdrop –∑–∞–≤—Ç—Ä–∞ 14:00 –ø–æ—Ä–æ–≥ 200
        text = msg.text.lower()
        time_str = text.split('–ø–æ—Ä–æ–≥')[0].replace('/newdrop','').strip()
        drop_ap = int(''.join([c for c in text.split('–ø–æ—Ä–æ–≥')[1] if c.isdigit()]))
        now = datetime.datetime.now(tz)
        if "–∑–∞–≤—Ç—Ä–∞" in time_str:
            base = now + datetime.timedelta(days=1)
            tpart = time_str.replace("–∑–∞–≤—Ç—Ä–∞","").strip()
        else:
            base = now
            tpart = time_str
        h,m = map(int,tpart.replace(':',' ').split())
        dt = tz.localize(datetime.datetime(base.year,base.month,base.day,h,m))
        cur.execute("INSERT INTO events(time,ap) VALUES(?,?)",(dt.isoformat(),drop_ap))
        conn.commit()
        announce_drop(dt, drop_ap, msg.chat.id)
        for h in [4,3,2,1]:
            run_time = dt - datetime.timedelta(hours=h)
            if run_time > now:
                scheduler.add_job(remind,args=[msg.chat.id,dt,drop_ap,h],trigger='date',run_date=run_time)
        bot.reply_to(msg,f"‚úÖ –î—Ä–æ–ø —Å–æ–∑–¥–∞–Ω {dt.strftime('%d.%m %H:%M')} | –ü–æ—Ä–æ–≥ {drop_ap}AP")
    except Exception:
        bot.reply_to(msg,"‚ùå –ü—Ä–∏–º–µ—Ä: /newdrop –∑–∞–≤—Ç—Ä–∞ 14:00 –ø–æ—Ä–æ–≥ 200")

def announce_drop(time, drop_ap, chat_id):
    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    scores=[]
    for u in users:
        name, ap, exp, last, _ = u
        exp_list=[int(x) for x in exp.split(',')]
        last_list=[int(x) for x in last.split('-')]
        score=calc_priority(ap,exp_list,last_list,drop_ap)
        scores.append((name,score))
    top3=sorted(scores,key=lambda x:x[1],reverse=True)[:3]
    names=', '.join([n for n,_ in top3])
    bot.send_message(chat_id,f"üíß –î—Ä–æ–ø {time.strftime('%d.%m %H:%M')} | –ü–æ—Ä–æ–≥ {drop_ap}AP\n‚úÖ –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç: {names}")

def remind(chat_id,time,drop_ap,hours_left):
    cur.execute("SELECT * FROM users")
    users = cur.fetchall()
    scores=[]
    for u in users:
        name, ap, exp, last, _ = u
        exp_list=[int(x) for x in exp.split(',')]
        last_list=[int(x) for x in last.split('-')]
        score=calc_priority(ap,exp_list,last_list,drop_ap)
        scores.append((name,score))
    top3=sorted(scores,key=lambda x:x[1],reverse=True)[:3]
    names=', '.join([n for n,_ in top3])
    bot.send_message(chat_id,f"‚è∞ –ß–µ—Ä–µ–∑ {hours_left}—á –¥—Ä–æ–ø ({time.strftime('%H:%M')}) | –ó–∞–±–∏—Ä–∞—é—Ç: {names}")

bot.infinity_polling()
