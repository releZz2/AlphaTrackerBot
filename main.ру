import os, sqlite3, datetime, threading, time
import pytz
import telebot
from apscheduler.schedulers.background import BackgroundScheduler

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7813840039:AAFquVUm1z_IXM60VJwWqftocUCFYGhHRYI"          # —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
TIMEZONE = "Europe/Kyiv"                   #–ö–∏–µ–≤
#CHATIDNone                             #—Å—é–¥–∞ –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å id –≥—Ä—É–ø–ø—ã/—á–∞—Ç–∞ –¥–ª—è –ø–∏–Ω–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä -1001234567890)
#THREADIDNone                           # —Å—é–¥–∞ –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å id –≤–µ—Ç–∫–∏ (message_thread_id), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–∏–Ω–≥–æ–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ –≤ —Ç–æ–ø–∏–∫
#ALLOWEDCHATIDNone                     # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ: –ø–æ—Å—Ç–∞–≤—å —Å—é–¥–∞ –µ–≥–æ id (–∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤—å None)

# —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏/–≤–∞–ª–∏–¥–∞—Ü–∏–∏, –º–æ–∂–Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å)
KNOWN_PARTICIPANTS = ["–ù–∞–∑–∞—Ä","releZz","–ê–Ω–≥–µ–ª–∏–Ω–∞ 19","–í–∞–Ω—è","–ê–Ω–¥—Ä–µ–π","–Ø—Ä–∏–∫","–°–µ—Ä–µ–≥–∞"]

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
tz = pytz.timezone(TIMEZONE)
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# –ë–î (—Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
conn = sqlite3.connect("drops.db", check_same_thread=False)
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(
    name TEXT PRIMARY KEY,
    ap INTEGER,
    expire TEXT,         -- "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15"
    last TEXT,           -- "5-7"
    updated TIMESTAMP
)""")
cur.execute("""CREATE TABLE IF NOT EXISTS events(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    when_ts TEXT,        -- ISO –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
    ap_req INTEGER
)""")
conn.commit()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler(timezone=tz)
scheduler.start()

# === –£–¢–ò–õ–ò–¢–´ ===
def parse_expire(s: str):
    # "3,5" -> [3,5]
    return [int(x) for x in s.replace(',', ' ').split() if x.isdigit()]

def parse_last(s: str):
    # "5-7" -> [5,7] ; "7" -> [7]
    return [int(x) for x in s.replace('-', ' ').split() if x.isdigit()]

def calc_priority(ap: int, expire_list, last_list, drop_ap: int) -> int:
    soon = any(d <= 3 for d in expire_list) if expire_list else False
    rest = (max(last_list) >= 7) if last_list else False
    surplus = (ap >= drop_ap + 20)
    return (2 if soon else 0) + (1 if surplus else 0) + (1 if rest else 0)

def now_kiev():
    return datetime.datetime.now(tz)

def send(chat_id, text, thread_id=None):
    kwargs = {}
    if thread_id is not None:
        kwargs["message_thread_id"] = thread_id
    bot.send_message(chat_id, text, **kwargs)

def allowed(message):
    return (ALLOWED_CHAT_ID is None) or (message.chat.id == ALLOWED_CHAT_ID)

# === –ü–ò–ù–ì (–Ω–µ –¥–∞—ë–º Render ‚Äú—É—Å—ã–ø–∏—Ç—å‚Äù)
def ping_job():
    if CHAT_ID is None:  # –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return
    stamp = now_kiev().strftime("%H:%M")
    try:
        send(CHAT_ID, f"‚úÖ Ping ‚Äî –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω ({stamp})", THREAD_ID)
    except Exception as e:
        print("Ping error:", e)

# –∫–∞–∂–¥—ã–µ ~14 –º–∏–Ω—É—Ç
scheduler.add_job(ping_job, "interval", minutes=14)

# === –ö–û–ú–ê–ù–î–´ –°–õ–£–ñ–ï–ë–ù–´–ï ===
@bot.message_handler(commands=["start"])
def cmd_start(message):
    if not allowed(message): return
    bot.reply_to(message,
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥—Ä–æ–ø–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /drop –ò–º—è 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7\n"
        "‚Ä¢ /newdrop –∑–∞–≤—Ç—Ä–∞ 14:00 –ø–æ—Ä–æ–≥ 200\n"
        "‚Ä¢ /id ‚Äî –ø–æ–∫–∞–∂—É chat_id\n"
        "‚Ä¢ /thread ‚Äî –ø–æ–∫–∞–∂—É thread_id (–≤ –≤–µ—Ç–∫–µ)"
    )

@bot.message_handler(commands=["id"])
def cmd_id(message):
    if not allowed(message): return
    bot.reply_to(message, f"üîé chat_id: <code>{message.chat.id}</code>")

@bot.message_handler(commands=["thread"])
def cmd_thread(message):
    if not allowed(message): return
    bot.reply_to(message, f"üßµ thread_id: <code>{getattr(message, 'message_thread_id', None)}</code>")

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
@bot.message_handler(commands=["drop"])
def cmd_drop(message):
    if not allowed(message): return
    # —Ñ–æ—Ä–º–∞—Ç: /drop –ò–º—è 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7
    try:
        parts = message.text.strip().split()
        # /drop –ò–º—è AP –≤–µ—Ä–Ω—É—Ç X,Y –ø–æ—Å–ª–µ–¥–Ω–∏–π A-B
        name = parts[1]
        ap_str = parts[2]
        ap_val = int("".join([c for c in ap_str if c.isdigit()]))

        # –Ω–∞–π–¥—ë–º –∏–Ω–¥–µ–∫—Å—ã —Å–ª–æ–≤
        text_low = message.text.lower()
        if "–≤–µ—Ä–Ω—É—Ç" not in text_low or "–ø–æ—Å–ª–µ–¥–Ω–∏–π" not in text_low:
            raise ValueError("–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        after_return = text_low.split("–≤–µ—Ä–Ω—É—Ç", 1)[1].strip()
        ret_part = after_return.split("–ø–æ—Å–ª–µ–¥–Ω–∏–π", 1)[0].strip()
        last_part = text_low.split("–ø–æ—Å–ª–µ–¥–Ω–∏–π", 1)[1].strip()

        expire_list = parse_expire(ret_part)
        last_list = parse_last(last_part)

        # —Å–æ—Ö—Ä–∞–Ω–∏–º/–æ–±–Ω–æ–≤–∏–º
        cur.execute("REPLACE INTO users(name, ap, expire, last, updated) VALUES (?,?,?,?,?)",
                    (name, ap_val, ",".join(map(str,expire_list)), "-".join(map(str,last_list)), now_kiev().isoformat()))
        conn.commit()

        bot.reply_to(message, f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: <b>{name}</b> ‚Äî {ap_val}AP, –≤–µ—Ä–Ω—É—Ç {expire_list or '-'}, –ø–æ—Å–ª–µ–¥–Ω–∏–π {last_list or '-'}")

    except Exception as e:
        bot.reply_to(message, "‚ùå –ü—Ä–∏–º–µ—Ä:\n/drop –°–µ—Ä—ë–≥–∞ 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7")

@bot.message_handler(commands=["newdrop"])
def cmd_newdrop(message):
    if not allowed(message): return
    # —Ñ–æ—Ä–º–∞—Ç: /newdrop –∑–∞–≤—Ç—Ä–∞ 14:00 –ø–æ—Ä–æ–≥ 200
    try:
        text = message.text.lower().replace("/newdrop", "").strip()
        if "–ø–æ—Ä–æ–≥" not in text:
            raise ValueError("–Ω–µ—Ç –ø–æ—Ä–æ–≥–∞")
        time_part = text.split("–ø–æ—Ä–æ–≥", 1)[0].strip()
        ap_req = int("".join([c for c in text.split("–ø–æ—Ä–æ–≥",1)[1] if c.isdigit()]))

        base = now_kiev()
        if "–∑–∞–≤—Ç—Ä–∞" in time_part:
            base = base + datetime.timedelta(days=1)
            time_part = time_part.replace("–∑–∞–≤—Ç—Ä–∞", "").strip()

        # –ø–æ–¥–¥–µ—Ä–∂–∏–º —Ñ–æ—Ä–º–∞—Ç—ã "14:00" –∏–ª–∏ "14 00"
        hm = [int(x) for x in time_part.replace(":", " ").split() if x.isdigit()]
        if len(hm) != 2: raise ValueError("–≤—Ä–µ–º—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
        h, m = hm
        event_dt = tz.localize(datetime.datetime(base.year, base.month, base.day, h, m))

        # —Å–æ—Ö—Ä–∞–Ω–∏–º —Å–æ–±—ã—Ç–∏–µ
        cur.execute("INSERT INTO events(when_ts, ap_req) VALUES(?,?)", (event_dt.isoformat(), ap_req))
        conn.commit()

        # –ø–µ—Ä–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ä–∞–∑—É
        announce_selection(message.chat.id, event_dt, ap_req, getattr(message, "message_thread_id", None))

        # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 4/3/2/1 —á–∞—Å–∞
        for hours in [4,3,2,1]:
            run_at = event_dt - datetime.timedelta(hours=hours)
            if run_at > now_kiev():
                scheduler.add_job(remind_job, "date",
                                  run_date=run_at,
                                  args=[message.chat.id, event_dt, ap_req, hours, getattr(message, "message_thread_id", None)])

        bot.reply_to(message, f"‚úÖ –î—Ä–æ–ø —Å–æ–∑–¥–∞–Ω: {event_dt.strftime('%d.%m %H:%M')} | –ü–æ—Ä–æ–≥ {ap_req} AP")

    except Exception as e:
        bot.reply_to(message, "‚ùå –ü—Ä–∏–º–µ—Ä:\n/newdrop –∑–∞–≤—Ç—Ä–∞ 14:00 –ø–æ—Ä–æ–≥ 200")

# === –õ–û–ì–ò–ö–ê –û–¢–ë–û–†–ê ===
def select_top3(ap_req: int):
    cur.execute("SELECT name, ap, expire, last, updated FROM users")
    rows = cur.fetchall()
    scored = []
    for name, ap, expire, last, _ in rows:
        exp_list = parse_expire(expire or "")
        last_list = parse_last(last or "")
        score = calc_priority(int(ap or 0), exp_list, last_list, ap_req)
        scored.append((name, int(ap or 0), exp_list, last_list, score))
    scored.sort(key=lambda x: x[4], reverse=True)
    return scored[:3], scored

def announce_selection(chat_id, when_dt, ap_req, thread_id=None):
    top3, all_scored = select_top3(ap_req)
    top_line = ", ".join([t[0] for t in top3]) if top3 else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    # –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å)
    lines = ["üìã –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:"]
    for name, ap, exp_li, last_li, score in all_scored[:7]:
        lines.append(f"‚Ä¢ {name}: score <b>{score}</b> | {ap}AP | –≤–µ—Ä–Ω—É—Ç {exp_li or '-'} | –ø–æ—Å–ª–µ–¥–Ω–∏–π {last_li or '-'}")
    text = (
        f"üíß –î—Ä–æ–ø {when_dt.strftime('%d.%m %H:%M')} | –ü–æ—Ä–æ–≥ {ap_req} AP\n"
        f"‚úÖ –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç: <b>{top_line}</b>\n\n" + "\n".join(lines)
    )
    send(chat_id, text, thread_id)

def remind_job(chat_id, when_dt, ap_req, hours_left, thread_id=None):
    top3, _ = select_top3(ap_req)  # –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
    top_line = ", ".join([t[0] for t in top3]) if top3 else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    send(chat_id, f"‚è∞ –ß–µ—Ä–µ–∑ {hours_left}—á –¥—Ä–æ–ø ({when_dt.strftime('%H:%M')}) | –ó–∞–±–∏—Ä–∞—é—Ç: <b>{top_line}</b>", thread_id)

# === –ê–í–¢–û-–ü–û–õ–õ–ò–ù–ì ===
def run_polling():
    print("Polling started‚Ä¶")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)

threading.Thread(target=run_polling, daemon=True).start()

# —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–∏–Ω–≥ (–Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
def backup_ping_loop():
    while True:
        try: ping_job()
        except: pass
        time.sleep(60*14)

threading.Thread(target=backup_ping_loop, daemon=True).start()

# –¥–µ—Ä–∂–∏–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –∂–∏–≤—ã–º
while True:
    time.sleep(3600)
