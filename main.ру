# AlphaTrackerBot v1.0 ‚Äî Chat Edition
# –§—É–Ω–∫—Ü–∏–∏:
#  - /drop –ò–º—è 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7 ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
#  - /newdrop [—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞] HH:MM –ø–æ—Ä–æ–≥ 200 ‚Äî —Å–æ–∑–¥–∞—Ç—å –¥—Ä–æ–ø, —Å—Ä–∞–∑—É –¥–∞—Ç—å —Ç–æ–ø-3 –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ ‚àí4/‚àí3/‚àí2/‚àí1 —á
#  - /stats ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∞–ø–¥–µ–π—Ç–∞–º
#  - /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å chat_id; /thread ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å thread_id (–¥–ª—è –≤–µ—Ç–∫–∏)
#  - –∞–≤—Ç–æ–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –Ω–µ ¬´–∑–∞—Å—ã–ø–∞–ª¬ª –Ω–∞ Render
#  - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ç–∫–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

import os, sqlite3, datetime, threading, time
import pytz
import telebot
from apscheduler.schedulers.background import BackgroundScheduler

# === ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "–í–°–¢–ê–í–¨_–°–í–û–ô_–¢–û–ö–ï–ù_–°–Æ–î–ê"       # —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
TIMEZONE = "Europe/Kyiv"                # –ö–∏–µ–≤
# (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç/–≤–µ—Ç–∫—É:
ALLOWED_CHAT_ID = None                  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890 (—á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ)
DEFAULT_CHAT_ID = None                  # —á–∞—Ç, –∫—É–¥–∞ —Å–ª–∞—Ç—å –∞–≤—Ç–æ–ø–∏–Ω–≥/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å)
DEFAULT_THREAD_ID = None                # id –≤–µ—Ç–∫–∏ (message_thread_id) –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≤–µ—Ç–∫–∞)

# —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏/–≤–∞–ª–∏–¥–∞—Ü–∏–∏, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî –±–æ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∏–º–µ–Ω–∞)
KNOWN_PARTICIPANTS = ["–ù–∞–∑–∞—Ä","releZz","–ê–Ω–≥–µ–ª–∏–Ω–∞ 19","–í–∞–Ω—è","–ê–Ω–¥—Ä–µ–π","–Ø—Ä–∏–∫","–°–µ—Ä—ë–≥–∞"]

# === üß© –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
tz = pytz.timezone(TIMEZONE)
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# –ë–î
conn = sqlite3.connect("drops.db", check_same_thread=False)
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(
    name TEXT PRIMARY KEY,
    ap   INTEGER,
    expire TEXT,      -- "3,5"
    last   TEXT,      -- "5-7"
    updated TIMESTAMP
)""")
cur.execute("""CREATE TABLE IF NOT EXISTS events(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    when_ts TEXT,     -- ISO-—Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥—Ä–æ–ø–∞
    ap_req INTEGER
)""")
conn.commit()

scheduler = BackgroundScheduler(timezone=tz)
scheduler.start()

# === üîß –£–¢–ò–õ–ò–¢–´ ===
def now_kiev():
    return datetime.datetime.now(tz)

def parse_expire(s: str):
    return [int(x) for x in s.replace(',', ' ').split() if x.isdigit()]

def parse_last(s: str):
    return [int(x) for x in s.replace('-', ' ').split() if x.isdigit()]

def calc_priority(ap: int, expire_list, last_list, drop_ap: int) -> int:
    soon = any(d <= 3 for d in expire_list) if expire_list else False
    rest = (max(last_list) >= 7) if last_list else False
    surplus = (ap >= drop_ap + 20)
    # –≤–µ—Å–∞: +2 –∑–∞ —Å–∫–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—Ç, +1 –∑–∞ –∑–∞–ø–∞—Å AP, +1 –∑–∞ ¬´–¥–∞–≤–Ω–æ –Ω–µ –±—Ä–∞–ª¬ª
    return (2 if soon else 0) + (1 if surplus else 0) + (1 if rest else 0)

def send_msg(chat_id, text, thread_id=None):
    kwargs = {}
    if thread_id is not None:
        kwargs["message_thread_id"] = thread_id
    bot.send_message(chat_id, text, **kwargs)

def is_allowed_chat(message):
    return (ALLOWED_CHAT_ID is None) or (message.chat.id == ALLOWED_CHAT_ID)

# === ‚è∞ –ê–í–¢–û–ü–ò–ù–ì (14 –º–∏–Ω) ‚Äî –¥–µ—Ä–∂–∏–º –∏–Ω—Å—Ç–∞–Ω—Å –∞–∫—Ç–∏–≤–Ω—ã–º
def ping_job():
    if DEFAULT_CHAT_ID is None:
        return
    stamp = now_kiev().strftime("%H:%M")
    try:
        send_msg(DEFAULT_CHAT_ID, f"‚úÖ Ping ‚Äî –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω ({stamp})", DEFAULT_THREAD_ID)
    except Exception as e:
        print("Ping error:", e)

scheduler.add_job(ping_job, "interval", minutes=14)

# === üìä –í–´–ë–û–† –¢–û–ü-3
def select_top3(ap_req: int):
    cur.execute("SELECT name, ap, expire, last, updated FROM users")
    rows = cur.fetchall()
    scored = []
    for name, ap, expire, last, _ in rows:
        ap_val = int(ap or 0)
        exp_list = parse_expire(expire or "")
        last_list = parse_last(last or "")
        score = calc_priority(ap_val, exp_list, last_list, ap_req)
        scored.append((name, ap_val, exp_list, last_list, score))
    scored.sort(key=lambda x: x[4], reverse=True)
    return scored[:3], scored

def announce_selection(chat_id, when_dt, ap_req, thread_id=None):
    top3, all_scored = select_top3(ap_req)
    top_line = ", ".join([t[0] for t in top3]) if top3 else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    lines = ["üìã –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:"]
    for name, ap, exp_li, last_li, score in all_scored[:7]:
        lines.append(f"‚Ä¢ {name}: score <b>{score}</b> | {ap}AP | –≤–µ—Ä–Ω—É—Ç {exp_li or '-'} | –ø–æ—Å–ª–µ–¥–Ω–∏–π {last_li or '-'}")
    text = (
        f"üíß –î—Ä–æ–ø {when_dt.strftime('%d.%m %H:%M')} | –ü–æ—Ä–æ–≥ {ap_req} AP\n"
        f"‚úÖ –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç: <b>{top_line}</b>\n\n" + "\n".join(lines)
    )
    send_msg(chat_id, text, thread_id)

def remind_job(chat_id, when_dt, ap_req, hours_left, thread_id=None):
    top3, _ = select_top3(ap_req)
    top_line = ", ".join([t[0] for t in top3]) if top3 else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    send_msg(chat_id, f"‚è∞ –ß–µ—Ä–µ–∑ {hours_left}—á –¥—Ä–æ–ø ({when_dt.strftime('%H:%M')}) | –ó–∞–±–∏—Ä–∞—é—Ç: <b>{top_line}</b>", thread_id)

# === üß† –ö–û–ú–ê–ù–î–´ ===
@bot.message_handler(commands=["start"])
def cmd_start(message):
    if not is_allowed_chat(message): return
    bot.reply_to(message,
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø AlphaTrackerBot.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /drop –ò–º—è 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7\n"
        "‚Ä¢ /newdrop [—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞] HH:MM –ø–æ—Ä–æ–≥ 200\n"
        "‚Ä¢ /stats ‚Äî —Å–≤–æ–¥–∫–∞\n"
        "‚Ä¢ /id ‚Äî chat_id, /thread ‚Äî thread_id"
    )

@bot.message_handler(commands=["id"])
def cmd_id(message):
    if not is_allowed_chat(message): return
    bot.reply_to(message, f"üîé chat_id: <code>{message.chat.id}</code>")

@bot.message_handler(commands=["thread"])
def cmd_thread(message):
    if not is_allowed_chat(message): return
    bot.reply_to(message, f"üßµ thread_id: <code>{getattr(message, 'message_thread_id', None)}</code>")

@bot.message_handler(commands=["stats"])
def cmd_stats(message):
    if not is_allowed_chat(message): return
    cur.execute("SELECT name, ap, expire, last, updated FROM users ORDER BY name")
    rows = cur.fetchall()
    if not rows:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /drop —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å.")
        return
    lines = ["üìä –°–≤–æ–¥–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"]
    for name, ap, exp, last, updated in rows:
        lines.append(f"‚Ä¢ {name}: {ap}AP | –≤–µ—Ä–Ω—É—Ç {exp or '-'} | –ø–æ—Å–ª–µ–¥–Ω–∏–π {last or '-'} | upd {updated[:16]}")
    bot.reply_to(message, "\n".join(lines))

@bot.message_handler(commands=["drop"])
def cmd_drop(message):
    if not is_allowed_chat(message): return
    # –ø—Ä–∏–º–µ—Ä: /drop –°–µ—Ä—ë–≥–∞ 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7
    try:
        parts = message.text.strip().split()
        if len(parts) < 6:
            raise ValueError("too short")
        name = parts[1]
        ap_str = parts[2]
        ap_val = int("".join([c for c in ap_str if c.isdigit()]))

        text_low = message.text.lower()
        if "–≤–µ—Ä–Ω—É—Ç" not in text_low or "–ø–æ—Å–ª–µ–¥–Ω–∏–π" not in text_low:
            raise ValueError("no keywords")

        after_return = text_low.split("–≤–µ—Ä–Ω—É—Ç", 1)[1].strip()
        ret_part = after_return.split("–ø–æ—Å–ª–µ–¥–Ω–∏–π", 1)[0].strip()
        last_part = text_low.split("–ø–æ—Å–ª–µ–¥–Ω–∏–π", 1)[1].strip()

        expire_list = parse_expire(ret_part)
        last_list = parse_last(last_part)

        cur.execute("REPLACE INTO users(name, ap, expire, last, updated) VALUES (?,?,?,?,?)",
                    (name, ap_val, ",".join(map(str,expire_list)), "-".join(map(str,last_list)), now_kiev().isoformat()))
        conn.commit()
        bot.reply_to(message, f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{name}</b> ‚Äî {ap_val}AP | –≤–µ—Ä–Ω—É—Ç {expire_list or '-'} | –ø–æ—Å–ª–µ–¥–Ω–∏–π {last_list or '-'}")

    except Exception:
        bot.reply_to(message, "‚ùå –ü—Ä–∏–º–µ—Ä:\n/drop –°–µ—Ä—ë–≥–∞ 240AP –≤–µ—Ä–Ω—É—Ç 3,5 –ø–æ—Å–ª–µ–¥–Ω–∏–π 5-7")

@bot.message_handler(commands=["newdrop"])
def cmd_newdrop(message):
    if not is_allowed_chat(message): return
    # –ø—Ä–∏–º–µ—Ä: /newdrop –∑–∞–≤—Ç—Ä–∞ 14:00 –ø–æ—Ä–æ–≥ 200  –∏–ª–∏  /newdrop 16:30 –ø–æ—Ä–æ–≥ 210
    try:
        text = message.text.lower().replace("/newdrop", "").strip()
        if "–ø–æ—Ä–æ–≥" not in text:
            raise ValueError("no ap req")
        time_part = text.split("–ø–æ—Ä–æ–≥", 1)[0].strip()
        ap_req = int("".join([c for c in text.split("–ø–æ—Ä–æ–≥",1)[1] if c.isdigit()]))

        base = now_kiev()
        if "–∑–∞–≤—Ç—Ä–∞" in time_part:
            base = base + datetime.timedelta(days=1)
            time_part = time_part.replace("–∑–∞–≤—Ç—Ä–∞", "").strip()
        if "—Å–µ–≥–æ–¥–Ω—è" in time_part:
            time_part = time_part.replace("—Å–µ–≥–æ–¥–Ω—è", "").strip()

        hm = [int(x) for x in time_part.replace(":", " ").split() if x.isdigit()]
        if len(hm) != 2: raise ValueError("bad time")
        h, m = hm
        event_dt = tz.localize(datetime.datetime(base.year, base.month, base.day, h, m))

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        cur.execute("INSERT INTO events(when_ts, ap_req) VALUES(?,?)", (event_dt.isoformat(), ap_req))
        conn.commit()

        thread_id = getattr(message, "message_thread_id", DEFAULT_THREAD_ID)
        # –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        announce_selection(message.chat.id, event_dt, ap_req, thread_id)

        # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚àí4/‚àí3/‚àí2/‚àí1 —á
        now_dt = now_kiev()
        for hours in [4,3,2,1]:
            run_at = event_dt - datetime.timedelta(hours=hours)
            if run_at > now_dt:
                scheduler.add_job(remind_job, "date",
                                  run_date=run_at,
                                  args=[message.chat.id, event_dt, ap_req, hours, thread_id])

        bot.reply_to(message, f"‚úÖ –î—Ä–æ–ø —Å–æ–∑–¥–∞–Ω: {event_dt.strftime('%d.%m %H:%M')} | –ü–æ—Ä–æ–≥ {ap_req} AP")

    except Exception:
        bot.reply_to(message, "‚ùå –ü—Ä–∏–º–µ—Ä—ã:\n"
                              "/newdrop –∑–∞–≤—Ç—Ä–∞ 14:00 –ø–æ—Ä–æ–≥ 200\n"
                              "/newdrop 16:30 –ø–æ—Ä–æ–≥ 210")

# === üöÄ –ü–û–õ–õ–ò–ù–ì + –†–ï–ó–ï–†–í–ù–´–ô –ü–ò–ù–ì ===
def run_polling():
    print("Polling started‚Ä¶")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)

threading.Thread(target=run_polling, daemon=True).start()

def backup_ping_loop():
    while True:
        try: ping_job()
        except: pass
        time.sleep(60*14)

threading.Thread(target=backup_ping_loop, daemon=True).start()

# –¥–µ—Ä–∂–∏–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
while True:
    time.sleep(3600)
